{"remainingRequest":"/Users/paulbowler/vuexy-admin-v8.1.0/vue-version/vuexy-bootstrapvue/vuexy-starter-kit/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/paulbowler/vuexy-admin-v8.1.0/vue-version/vuexy-bootstrapvue/vuexy-starter-kit/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/paulbowler/vuexy-admin-v8.1.0/vue-version/vuexy-bootstrapvue/vuexy-starter-kit/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/paulbowler/vuexy-admin-v8.1.0/vue-version/vuexy-bootstrapvue/vuexy-starter-kit/src/views/recipes/ListRecipes.vue?vue&type=template&id=195ab2f3&","dependencies":[{"path":"/Users/paulbowler/vuexy-admin-v8.1.0/vue-version/vuexy-bootstrapvue/vuexy-starter-kit/src/views/recipes/ListRecipes.vue","mtime":1652467947348},{"path":"/Users/paulbowler/vuexy-admin-v8.1.0/vue-version/vuexy-bootstrapvue/vuexy-starter-kit/node_modules/cache-loader/dist/cjs.js","mtime":1652438754999},{"path":"/Users/paulbowler/vuexy-admin-v8.1.0/vue-version/vuexy-bootstrapvue/vuexy-starter-kit/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1652438756424},{"path":"/Users/paulbowler/vuexy-admin-v8.1.0/vue-version/vuexy-bootstrapvue/vuexy-starter-kit/node_modules/cache-loader/dist/cjs.js","mtime":1652438754999},{"path":"/Users/paulbowler/vuexy-admin-v8.1.0/vue-version/vuexy-bootstrapvue/vuexy-starter-kit/node_modules/vue-loader/lib/index.js","mtime":1652438755976}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}